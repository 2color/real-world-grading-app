//Modelos creando una app de calificacion de cursos, donde tendremos usuarios(profe, alumno) sus test con el resultado

//la app tendra: 

//un rol: UserRole
//un userId: integer
//un courseId: integer

// la relaciones sera:

// una inscripcion a un curso --> muchos users
// muchos users -->  muchos cursos
// un  test -->  muchos resultados

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//campos y relaciones: 

model User {
  id        Int    @default(autoincrement())
  email     String @unique
  firstName String
  lastName  String
  social    Json?// objeto  como valor de la key
}

//campos y relaciones: 

// model Course {
//   id  Int @default(autoincrement())

// }

// //campos y relaciones: 

// model Test {
// }

// //campos y relaciones: 

// model TestResult {
// }

// model APPCalificaciones {
// }












///////////////////////////////////////////////////////////////-- DEFAULT --////////////////////////////////////////////////////////

// model User {
//   id        Int     @id @default(autoincrement())
//   email     String  @unique
//   firstName String?
//   lastName  String?
//   social    Json?
//   isAdmin   Boolean @default(false)

//   // Relation fields
//   courses     CourseEnrollment[]
//   testResults TestResult[]       @relation(name: "results")
//   testsGraded TestResult[]       @relation(name: "graded")
//   tokens      Token[]
//   feedback    CourseFeedback[]
// }

// model Token {
//   id         Int       @id @default(autoincrement())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   type       TokenType
//   emailToken String?   @unique // Only used for short lived email tokens
//   valid      Boolean   @default(true)
//   expiration DateTime

//   // Relation fields
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
// }

// model Course {
//   id            Int     @id @default(autoincrement())
//   name          String
//   courseDetails String?

//   // Relation fields
//   members  CourseEnrollment[]
//   tests    Test[]
//   feedback CourseFeedback[]
// }

// model CourseFeedback {
//   id       Int    @id @default(autoincrement())
//   feedback String @db.Text

//   studentId Int
//   courseId  Int
//   student   User   @relation(fields: [studentId], references: [id])
//   course    Course @relation(fields: [courseId], references: [id])
// }

// model CourseEnrollment {
//   createdAt DateTime @default(now())
//   role      UserRole

//   // Relation Fields
//   userId   Int
//   courseId Int
//   user     User   @relation(fields: [userId], references: [id])
//   course   Course @relation(fields: [courseId], references: [id])

//   @@id([userId, courseId])
//   @@index([userId, role])
// }

// model Test {
//   id        Int      @id @default(autoincrement())
//   updatedAt DateTime @updatedAt
//   name      String
//   date      DateTime

//   // Relation Fields
//   courseId    Int
//   course      Course       @relation(fields: [courseId], references: [id])
//   testResults TestResult[]
// }

// model TestResult {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   result    Int // Percentage precise to one decimal point represented as `result * 10^-1`

//   // Relation Fields
//   studentId Int
//   student   User @relation(name: "results", fields: [studentId], references: [id])
//   graderId  Int
//   gradedBy  User @relation(name: "graded", fields: [graderId], references: [id])
//   testId    Int
//   test      Test @relation(fields: [testId], references: [id])
// }

// enum UserRole {
//   STUDENT
//   TEACHER
// }

// enum TokenType {
//   EMAIL // used as a short lived token sent to the user's email
//   API
// }
