generator client {
  provider             = "prisma-client-js"
  experimentalFeatures = ["transactionApi", "aggregateApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email       String             @unique
  id          Int                @default(autoincrement()) @id
  name        String
  social      Json?

  // Relation fields
  courses     CourseEnrollment[]
  testResults TestResult[]       @relation(name: "results")
  testsGraded TestResult[]       @relation(name: "graded")
}

model Course {
  id      Int                @default(autoincrement()) @id
  name    String

  // Relation fields
  members CourseEnrollment[]
  tests   Test[]
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  // Relation Fields
  userId   Int
  courseId Int
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model Test {
  id        Int      @default(autoincrement()) @id
  updatedAt DateTime @updatedAt
  name      String
  date      DateTime

  // Relation Fields
  courseId   Int
  course     Course       @relation(fields: [courseId], references: [id])
  testResult TestResult[]
}

model TestResult {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  result    Int // Percentage precise to one decimal point represented result * 10^-1

  // Relation Fields
  graderId  Int
  studentId Int
  testId    Int
  student   User @relation(name: "results", fields: [studentId], references: [id])
  gradedBy  User @relation(name: "graded", fields: [graderId], references: [id])
  test      Test @relation(fields: [testId], references: [id])
}

enum UserRole {
  STUDENT
  TEACHER
}
